# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
#get.variables(lpmodel)    # Decision variables
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
library(lpSolveAPI)
# Use the Windsor Glass Problem
lprec <- make.lp(0, 2) # number of constraints, number of decision variables
#Defaults to Minimize objective function
set.objfn(lprec, c(-3, -5))
add.constraint(lprec, c(1, 0), "<=", 4)
add.constraint(lprec, c(0, 2), "<=", 12)
add.constraint(lprec, c(3, 2), "<=", 18)
#set.bounds(lprec, lower = c(0, 0), columns = c(1, 2)) #Not really needed
#set.bounds(lprec, upper = 100, columns = 4) If you want to set bounds for a column
RowNames <- c("Plant1", "Plant2", "Plant3")
ColNames <- c("Product1", "Product2")
dimnames(lprec) <- list(RowNames, ColNames)
lprec
write.lp(lprec,'wyndsor_out.lp',type='lp') # we will use this format soon
solve(lprec)
get.objective(lprec) * -1
get.variables(lprec)
get.constraints(lprec)
get.sensitivity.objex(lprec)
get.sensitivity.rhs(lprec)
get.dual.solution(lprec)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)
names <- colnames(lpmodel)
solution <- get.variables(lpmodel)
names(solution) <- names
solution
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
# Get the objective value
objective_value <- get.objective(lp_model)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
# Get the objective value
objective_value <- get.objective(lpmodel)
cat("Maximum Profit: $", objective_value, "\n")
# Get variable values
solution <- get.variables(lpmodel)
# Get variable names (optional)
var_names <- get.col.names(lpmodel)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
# Get the objective value
objective_value <- get.objective(lpmodel)
cat("Maximum Profit: $", objective_value, "\n")
# Get variable values
solution <- get.variables(lpmodel)
# Get variable names (optional)
var_names <- get.colnames(lpmodel)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
# Get the objective value
objective_value <- get.objective(lpmodel)
cat(sprintf("Maximum Profit: $%.2f\n", objective_value))
#cat("Maximum Profit: $", objective_value, "\n")
# Get variable values
solution <- get.variables(lpmodel)
# Get variable names (optional)
var_names <- get.col.names(lpmodel)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
# Get the objective value
objective_value <- get.objective(lpmodel)
cat(sprintf("Maximum Profit: $%.2f\n", objective_value))
#cat("Maximum Profit: $", objective_value, "\n")
# Get variable values
solution <- get.variables(lpmodel)
# Get variable names (optional)
#var_names <- get.col.names(lpmodel)
var_names <- colnames(lpmodel)
# Print results nicely
results <- data.frame(Variable = var_names, Value = solution)
print(results)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
# Get the objective value
objective_value <- get.objective(lpmodel)
maxVal = cat(sprintf("Maximum Profit: $%.2f\n", objective_value))
# Get variable values & names
solution <- get.variables(lpmodel)
var_names <- colnames(lpmodel)
# Print results nicely
results <- data.frame(Variable = var_names, Value = solution)
print(results)
print(maxVal)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
get.objective(lpmodel)    # Optimal objective value
get.variables(lpmodel)    # Decision variables
# Get the objective value
objective_value <- get.objective(lpmodel)
cat(sprintf("Maximum Profit: $%.2f\n", objective_value))
# Get variable values & names
solution <- get.variables(lpmodel)
var_names <- colnames(lpmodel)
# Print results nicely
results <- data.frame(Variable = var_names, Value = solution)
print(results)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
#get.objective(lpmodel)    # Optimal objective value
# Get the objective value
objective_value <- get.objective(lpmodel)
cat(sprintf("Maximum Profit: $%.2f\n", objective_value))
get.variables(lpmodel)    # Decision variables
# Get variable values & names
solution <- get.variables(lpmodel)
var_names <- colnames(lpmodel)
# Print results nicely
results <- data.frame(Variable = var_names, Value = solution)
print(results)
library(lpSolveAPI)
# Create LP model with 0 constraints and 9 variables
lpmodel <- make.lp(0, 9)
# Name variables
colnames(lpmodel) <- c("x11", "x12", "x13", "x21", "x22", "x23", "x31", "x32", "x33")
# Objective (max)
set.objfn(lpmodel, c(420, 360, 300, 420, 360, 300, 420, 360, 300))
lp.control(lpmodel, sense = "max")
# Capacity constraints
add.constraint(lpmodel, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 750)
add.constraint(lpmodel, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 450)
# Storage constraints
add.constraint(lpmodel, c(20, 15, 12, 0, 0, 0, 0, 0, 0), "<=", 13000)
add.constraint(lpmodel, c(0, 0, 0, 20, 15, 12, 0, 0, 0), "<=", 12000)
add.constraint(lpmodel, c(0, 0, 0, 0, 0, 0, 20, 15, 12), "<=", 5000)
# Demand constraints
add.constraint(lpmodel, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 900)
add.constraint(lpmodel, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 1200)
add.constraint(lpmodel, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 750)
# Equal use constraints
add.constraint(lpmodel, c(900, 900, 900, -750, -750, -750, 0, 0, 0), "=", 0)
add.constraint(lpmodel, c(0, 0, 0, 450, 450, 450, -900, -900, -900), "=", 0)
# Non-negativity bounds (default)
set.bounds(lpmodel, lower = rep(0, 9))
# Solve
solve(lpmodel)
# Results
# Max objective value
objective_value <- get.objective(lpmodel)
cat(sprintf("Maximum Profit: $%.2f\n", objective_value))
# Decision variables
#get.variables(lpmodel)
# Get variable values & names
solution <- get.variables(lpmodel)
var_names <- colnames(lpmodel)
# Print results nicely
results <- data.frame(Variable = var_names, Value = solution)
print(results)
x <- read.lp("Wyndsor.lp")
library(lpSolveAPI)
x <- read.lp("Wyndsor.lp")
setwd("~/GitHub/64018-001_QMM_cwood19/64018")
library(lpSolveAPI)
x <- read.lp("Wyndsor.lp")
x
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
setwd("~/GitHub/64018-001_QMM_cwood19/Module 4")
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
library(lpSolveAPI)
x <- read.lp("QMM_cwood19_4.lp")
print(x)
